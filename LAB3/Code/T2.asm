;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; 1DT301, Computer Technology I
; Date: 2015-09-03
; Author:
; Student name 1
; Student name 2
;
; Lab number: 3
; Title: How to use interrupts
;
; Hardware: STK600, CPU ATmega2560
;
; Function: Describe the function of the program, so that you can understand it,
; even if you're viewing this in a year from now!
;
; Input ports: Describe the function of used ports, for example on-board switches
; connected to PORTA.
;
; Output ports: Describe the function of used ports, for example on-board LEDs
; connected to PORTB.
;
; Subroutines: If applicable.
; Included files: m2560def.inc
;
; Other information:
;
; Changes in program: (Description and date)
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.include "m2560def.inc"

.org 0x00
rjmp start

.org INT0addr
rjmp interrupt

.org 0x72

start:
; Initialize SP, Stack Pointer
ldi r20, HIGH(RAMEND) ; R20 = high part of RAMEND address
out SPH,R20 ; SPH = high part of RAMEND address
ldi R20, low(RAMEND) ; R20 = low part of RAMEND address
out SPL,R20 ; SPL = low part of RAMEND address

ldi r20,0b00000010 ;Setting INT0 into falling edge
sts EICRA,r20
ldi r20,0b00000001 ;INT0 enable, pin 0 of Port D
out EIMSK,r20

ldi r17,0xFF	;Set PORTB as output
out DDRB, r17

ldi r17,0x00	;Set PORTD as input
out DDRD,r17

.equ JOHNSON = 0x00
.equ RING = 0xFF
.equ DOWN = 0
.def LED = r22
.def Status = r23
ldi Status,DOWN

ldi r16, RING	;iniatialize LEDs (Turn them off)
out PORTB,r16

call reset
sei	;Global interrupt enable

main:
	cpi r16, RING	;Check in which program it is
		breq Ring_Johnson	;Send to Johnson counter if r16 = 0xFF

	Johnson_Ring:	;Else goes here ans send to Ring counter
		
		call RC	;Call the Ring Counter routine
	rjmp main

	Ring_Johnson:
		call JC	;Call the Johnson Counter routine

rjmp main

reset:	;To reset the LEDS
ldi LED,0b11111110
out PORTB,LED
RET

RC:	;RING COUNTER
	SBIS PORTB,PINB7 ;If the LED7 is on then reset the LEDs otherwise skip the next line
		ldi LED,0b11111110
	SBIC PORTB,PINB7	;If the LED7 is not on then Rotate otherwise skip the next line 
		rol LED	;Rotate to the left 
	out PORTB,LED	;output to PORTB to show the LEDs
	call Delay	;Delay of 0.5 sec
rjmp main

JC:	;JOHNSON COUNTER
	cpi Status,DOWN	;Check if the LEDs needs to go left
		breq JCLEFT	;IF Status =0x00 go to JCLEFT
	rjmp JCRIGHT	;Otherwise go to JCRIGHT
	
	shift_left_right:
	ldi LED, 0b10000000	;Reset the LEDs to make go right
	out PORTB,LED
	call Delay
	com Status	;Change the status to 0xFF
	rjmp JCRIGHT

	shift_right_left:
	com Status	;Change the status to 0x00
	rjmp JCLEFT	;Jump back to JCLEFT

	JCLEFT:
		sbis PORTB,PINB7	;Checks if LED7 is on
			rjmp shift_left_right	;if it is on then jump to shift_left_right
		LSL LED ;Otherwise Logical shift to the left for the LEDs
		out PORTB, LED	;output to PORTB 
		CALL Delay
	rjmp finish
		
	JCRIGHT:
		sbic PORTB,PINB0	;If LED7 is off then jump to shift_right_left
			rjmp shift_right_left
		ASR LED	;Otherwise skip the jump and Arithmetic shift right
		out PORTB,LED
		CALL Delay
		

finish:
RET


interrupt:
com r16	;To change between 
call reset
RETI

Delay:
; Generated by delay loop calculator
; at http://www.bretmulvey.com/avrdelay.html
; Delay 500 000 cycles
; 500ms at 1 MHz
    ldi  r18, 3
    ldi  r19, 138
    ldi  r20, 86
L1: dec  r20
    brne L1
    dec  r19
    brne L1
    dec  r18
    brne L1
    rjmp PC+1
RET